#!/usr/bin/env bash-*-Shell-script-functions*-

###########################################################################
### Author:  Panagiotis Velissariou <panagiotis.velissariou@noaa.gov>
###
### Version - 1.0
###
###   1.0 Sun Mar 08 2022
###########################################################################

set +u

##################################################
### BEG:: UTILITY FUNCTIONS
##################################################


#####=============================================================================
### BEG:: ERROR FUNCTIONS
#####=============================================================================

###========================================
### forceError()
### Usage:      forceError message (optional)
### Parameters:
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : NONE
###
### forceError: A general force error function.
###========================================
forceError()
{
  local -i status=1

  [ "X${1}" != "X" ] && echo -n  "${1}"

  exit ${status}
}

###========================================
### procError()
### Usage:      procError message
###             procError "message1" \
###                       "message2" \
###                       .          \
###                       .          \
###                       .          \
###                       "messageN"
### Parameters:
###   message : The list of messages (strings) to display
###
### Returns : 1 (failure) or exits with code 1
###
### Exports : NONE
###
### Echoes  : On exit displays the supplied message with
###           the "ERROR" heading.
###
### procError: Force exit (code 1) on error and display the error message.
###========================================
procError()
{
  # These are for the current function (procError)
  local fnm0="${FUNCNAME[0]}"
  local snm0="$( basename "${BASH_SOURCE[0]}" )"

  # These are for the calling function(s)
  local err_str fun_str src_str
  local fnm1="${FUNCNAME[1]}"
  local fnm2="${FUNCNAME[2]}"
  local fnm3="${FUNCNAME[3]}"
  local fnm4="${FUNCNAME[4]}"
  local snm1="$( basename "${BASH_SOURCE[1]}" )"
  local snm2="$( basename "${BASH_SOURCE[2]}" )"
  local snm3="$( basename "${BASH_SOURCE[3]}" )"
  local snm4="$( basename "${BASH_SOURCE[4]}" )"

  # proc_str: strings to be displayed (if supplied)
  # trim_str: trimmed version of proc_str
  local trim_str proc_str=( "$@" )
  local -i istr


  # Strings that identify the calling functions and sources
  cfnm="${fnm2:+${fnm2}:}${fnm3:+${fnm3}:}${fnm4:+${fnm4}:}"
    cfnm="${cfnm:+(${cfnm%:})}"
  csnm="${snm2:+${snm2}:}${snm3:+${snm3}:}${snm4:+${snm4}:}"
    csnm="${csnm:+(${csnm%:})}"

  src_str="${snm1}${csnm:+ ${csnm}}"
  fun_str="${fnm1}${cfnm:+ ${cfnm}}"

  err_str="${fun_str:+${fun_str}: }${src_str:+called from: ${src_str}}"
  [ -z "${err_str:-}" ] && \
    err_str="${fnm0:+${fnm0}: }${snm0:+defined in: ${snm0}}"

  # Display everything and then issue the exit command
  [ -n "${err_str:+1}" ] && echo "ERROR:: ${err_str}"
  for ((istr = 0; istr < ${#proc_str[@]}; istr++))
  do
    trim_str="$( strTrim "${proc_str[${istr}]}" 2)"
    [ -n "${trim_str:+1}" ] && echo "        ${proc_str[${istr}]}"
  done
  echo "        Exiting now ..."
  echo
  if [ -n "${PS1:+1}" ]; then
    return 1
  else
    exit 1
  fi
}

###========================================
### procWarn()
### Usage:      procWarn message
###             procWarn "message1" \
###                      "message2" \
###                      .          \
###                      .          \
###                      .          \
###                      "messageN"
### Parameters:
###   message : The list of messages (strings) to display
###
### Returns : 0 (success)
###
### Exports : NONE
###
### Echoes  : Displays the supplied warning message with
###           the "WARN" heading.
###
### procWarn: Issue a warning message.
###========================================
procWarn()
{
  # These are for the current function (procError)
  local fnm0="${FUNCNAME[0]}"
  local snm0="$( basename "${BASH_SOURCE[0]}" )"

  # These are for the calling function(s)
  local func_str=
  local fnm1="${FUNCNAME[1]}"
  local fnm2="${FUNCNAME[2]}"
  local fnm3="${FUNCNAME[3]}"
  local fnm4="${FUNCNAME[4]}"
  local snm1="$( basename "${BASH_SOURCE[1]}" )"
  local snm2="$( basename "${BASH_SOURCE[2]}" )"
  local snm3="$( basename "${BASH_SOURCE[3]}" )"
  local snm4="$( basename "${BASH_SOURCE[4]}" )"

  # proc_str: strings to be displayed (if supplied)
  # trim_str: trimmed version of proc_str
  local trim_str= proc_str=( "$@" )
  local -i istr


  # Strings that identify the calling functions and sources
  cfnm="${fnm2:+${fnm2}:}${fnm3:+${fnm3}:}${fnm4:+${fnm4}:}"
    cfnm="${cfnm:+(${cfnm%:})}"
  csnm="${snm2:+${snm2}:}${snm3:+${snm3}:}${snm4:+${snm4}:}"
    csnm="${csnm:+(${csnm%:})}"

  func_str="${fnm1}${cfnm:+ ${cfnm}}: called from: ${snm1}${csnm:+ ${csnm}}"


  # Display everything and then issue the exit command
  [ -n "${func_str:+1}" ]  && echo "WARN:: ${func_str}"
  for ((istr = 0; istr < ${#proc_str[@]}; istr++))
  do
    trim_str="$( strTrim "${proc_str[${istr}]}" 2)"
    [ -n "${trim_str:+1}" ] && echo "        ${proc_str[${istr}]}"
  done
  echo
  return 0
}

#####=============================================================================
### END:: ERROR FUNCTIONS
#####=============================================================================


#####=============================================================================
### BEG:: NUMBER FUNCTIONS
#####=============================================================================

###========================================
### isInteger()
### Usage:      isInteger var
### Parameters: var
### Returns:    1 if var is not an integer (0 is an integer as well)
###             0 in any other case
### Echoes:     NONE
###========================================
isInteger()
{
  local -i retval=1

  [ $# -eq 0 ] && return ${retval}

  if [ "${1:-UNDEF}" -eq "${1}" ] 2>/dev/null
  then
    retval=0
  fi

  return ${retval}
}

###========================================
### getInteger()
### Usage:      getInteger int
### Parameters: int (int >=0 or, int < 0)
### Returns:    1 if var is not an integer
###             0 in any other case
### Echoes:     int, if it is a valid integer (including 0),
###             in any other case echoes an empty string
###========================================
getInteger()
{
  local -i retval=0
  local echoval= minus=

  # strip spaces, '+' signs and '-' signs
  # if the first character of the string is '-', set the minus variable
  echoval="$( echo "${1}" | sed 's/[[:space:]+]//g' )"
  [ "X$( echo "${echoval:0:1}" )" = "X-" ] && minus="-"
  echoval="${minus}$( echo "${echoval}" | sed 's/[[:space:]-]//g' )"

  if isInteger ${echoval}; then
    echoval="$(echo "scale=0; ${echoval} + 0" | bc -ql 2>/dev/null)"
    retval=$?
    echoval="${echoval:-0}"
  else
    echoval=
    retval=1
  fi

  echo -n ${echoval}

  return ${retval}
}

###========================================
### getPosInteger()
### Usage:      getPosInteger posint
### Parameters: posint (posint >= 0)
### Returns:    1 if var is not a positive integer
###             0 in any other case
### Echoes:     posint if it is a valid positive integer
###             (including 0), in any other case echoes an
###             empty string
###========================================
getPosInteger()
{
  local -i retval=0
  local echoval=

  echoval=$( getInteger "${1}" )
  retval=$?

  if [ ${retval} -ne 0 ] ; then
    echoval=
    retval=1
  else
    if [ ${echoval} -lt 0 ]; then
      echoval=
      retval=1
    fi
  fi

  echo -n ${echoval}

  return ${retval}
}

#####=============================================================================
### END:: NUMBER FUNCTIONS
#####=============================================================================


#####=============================================================================
### BEG:: STRING FUNCTIONS
#####=============================================================================

###========================================
### toUPPER()
### Usage:      toUPPER string
### Parameters:
###   string : The string in to convert
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The input string converted to an all upper case string
###
### toUPPER: Converts a string to an all upper case string
###========================================
toUPPER()
{
  echo "${1}" | tr '[:lower:]' '[:upper:]'
}

###========================================
### toLOWER()
### Usage:      toLOWER string
### Parameters:
###   string : The string in to convert
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The input string converted to an all lower case string
###
### toLOWER: Converts a string to an all lower case string
###========================================
toLOWER()
{
  echo "${1}" | tr '[:upper:]' '[:lower:]'
}

###========================================
### strESC()
### Usage:      strESC string
### Parameters:
###   string : The input string
###            The input string on which this function is applied
###            to escape special characters used in bash/sed ...
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The modified string with its special characters escaped
###
### strESC: Escapes special characters in a string: "'()/[]*.
###========================================
strESC()
{
  echo -n "$( echo "${*}" | sed -e "s/[\"\'\(\)\/\*\!]/\\\&/g;s/\[/\\\&/g;s/\]/\\\&/g" )"
}

strESC1()
{
  echo -n "$( echo "${*}" | sed -e "s/[\&\/\*\!]/\\\&/g;s/\[/\\\&/g;s/\]/\\\&/g" )"
}

###========================================
### strRmDuplicate()
### Usage:      strRmDuplicate string
### Parameters:
###   string : The input string
###            The input string that can contain a list of substrings
###            separated by spaces, in which duplicate substrings
###            are removed without sorting the remaining entries
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The modified string without duplicate substrings
###
### strRmDuplicate: Removes duplicate sub-strings from string
###                 without sorting the remaining entries.
###========================================
strRmDuplicate()
{
  local sep_str="${2:-[[:space:]]}"

  echo -n $( echo "${1}" | tr "${sep_str}" "\n" | \
             awk '{if ($1 in a) next; a[$1]=$0; print}' | \
             tr "\n" " " )
}

###========================================
### strSort()
### Usage:      strSort string
### Parameters:
###   string : The input string
###            The input string that can contain a list of substrings
###            separated by spaces, in which duplicate substrings
###            are removed while sorting the remaining entries
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The modified string without duplicate substrings
###
### strSort: Removes duplicate sub-strings from string and sorts
###          the remaining entries.
###========================================
strSort()
{
  local sep_str="${2:-[[:space:]]}"

  echo -n $( echo "${1}" | tr "${sep_str}" "\n" | \
             sort -u | tr "\n" " " )
}

###========================================
### strstr()
### Usage:      strstr s1 s2
### Parameters:
###   s1 : The input string
###   s2 : The sub-string in s1
###
### Returns : 1 if s2 does not occur in s1 (failure)
###           0 in any other case (success)
###
### Exports : NONE
###
### Echoes  : A substring starting at the first occurrence
###           of string s2 in string s1, or nothing if s2
###           does not occur in s1. If s2 points to a string
###           of zero length, strstr echoes s1.
###
### strstr: Extracts a sub-string from the input string.
###========================================
function strstr ()
{
  local -i retval=0
  local first=

# if s2 points to a string of zero length, strstr echoes s1
  if [ ${#2} -eq 0 ]; then
    echo -n "${1}"
    return ${retval}
  fi

# strstr echoes nothing if s2 does not occur in s1
  case "$1" in
  *$2*) ;;
     *) return ${retval};;
  esac

# use the pattern matching code to strip off the match and everything
# following it
  first=${1/$2*/}

# then strip off the first unmatched portion of the string
  echo -n "${1##$first}"

  return ${retval}
}

###========================================
### strTrim()
### Usage:      strTrim s1 flag
### Parameters:
###     s1 : The input string
###   flag : Integer
###          A value that controls the action of strTrim.
###          If flag is zero or not present, trailing blanks are removed.
###          Leading blanks are removed if it is equal to 1.
###          Both are removed if it is equal to 2.
###          In any other case, trailing blanks are removed.
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : s1 with all leading and/or trailing
###           white spaces removed.
###
### strTrim: Removes all leading and/or trailing white spaces
###          from the input string
###========================================
strTrim ()
{
  local trimFLG="${2:-0}"
  local out_str=

  case ${trimFLG} in
    0) out_str="$(echo "${1}" | sed 's/[[:space:]]*$//')" ;;
    1) out_str="$(echo "${1}" | sed 's/^[[:space:]]*//')" ;;
    2) out_str="$(echo "${1}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" ;;
    *) out_str="$(echo "${1}" | sed 's/[[:space:]]*$//')" ;;
  esac

  echo -n ${out_str}
}

###========================================
### checkSUBSTR()
### Usage:      checkSUBSTR s1 s2
### Parameters:
###   s1 : The input string
###   s2 : The sub-string in s1
###
### Returns : 1 if s2 does not occur in s1 (failure)
###           0 if s2 occurs in s1 (success)
###
### Exports : NONE
###
### Echoes  : NONE
###
### checkSUBSTR: Checks for a sub-string in the input string
###========================================
function checkSUBSTR()
{
  [ $# -lt 2 ] && return 1

  case "${1}" in
    *"${2}"*) return 0 ;;
           *) return 1 ;; # NO MATCH (error)
  esac
}

###********************************************************************************
### END:: STRING FUNCTIONS
###********************************************************************************


###********************************************************************************
### BEG:: FILE FUNCTIONS
###********************************************************************************

###========================================
### checkFILE()
### Usage:      checkFILE [options] file
### Parameters: file (string)
### Returns:    1 if the options are not met or, no arguments
###             were supplied or, the file is an empty string
###             0 in any other case (success)
### Echoes:     NONE
###
### Possible options are:
### -h FILE exists and is a symbolic link (same as -L)
### -L FILE exists and is a symbolic link (same as -h)
### -r FILE exists and is readable
### -s FILE exists and has a size greater than zero
### -w FILE exists and is writable
###
### Checks if the file "file" is a valid file
### based on the options supplied. If no options supplied
### it simply checks that if "file" is a a regular file
###========================================
checkFILE()
{
  local -i retval=0
  local get_opts my_arg="" chk_my_arg="" my_opts="-f" iopt
# Use these to reset the options since the shell does not
# do that automatically
  local opt_id=${OPTIND} opt_arg="${OPTARG}"

  [ $# -eq 0 ] && { retval=1; return ${retval}; }

  while getopts ":hLrsw" get_opts
  do
    case ${get_opts} in
      h|L) my_opts="${my_opts} -h";;
        r) my_opts="${my_opts} -r";;
        s) my_opts="${my_opts} -s";;
        w) my_opts="${my_opts} -w";;
        *) ;; # DEFAULT
    esac
  done

# Get the first argument after the options
  shift $(( ${OPTIND} - 1))
  my_arg=${1}

# Reset the option variables since the shell doesn't do it
  OPTIND=${opt_id}
  OPTARG="${opt_arg}"

  chk_my_arg="$( echo "${my_arg##*/}" | sed -e 's/[[:space:]]//g' )"
  [ "X${my_arg}" = "X" ] && { retval=1; return ${retval}; }

  for iopt in ${my_opts}
  do
    [ ! ${iopt} "${my_arg}" ] && { retval=1; return ${retval}; }
  done

  return ${retval}
}

###========================================
### checkDIR()
### Usage:      checkDIR [options] dir
### Parameters: dir (string)
### Returns:    1 if the options are not met or, no arguments
###             were supplied or, the dir is an empty string
###             0 in any other case (success)
### Echoes:     NONE
###
### Possible options are:
### -h FILE exists and is a symbolic link (same as -L)
### -L FILE exists and is a symbolic link (same as -h)
### -r FILE exists and is readable
### -x FILE exists and is executable
### -w FILE exists and is writable
###
### Checks if the directory "dir" is a valid directory
### based on the options supplied. If no options supplied
### it simply checks that if "dir" is a directory
###========================================
checkDIR()
{
  local -i retval=0
  local get_opts my_arg="" chk_my_arg="" my_opts="-d" iopt
# Use these to reset the options since the shell does not
# do that automatically
  local opt_id=${OPTIND} opt_arg="${OPTARG}"

  [ $# -eq 0 ] && { retval=1; return ${retval}; }

  while getopts ":hLrxw" get_opts
  do
    case ${get_opts} in
      h|L) my_opts="${my_opts} -h";;
        r) my_opts="${my_opts} -r";;
        x) my_opts="${my_opts} -x";;
        w) my_opts="${my_opts} -w";;
        *) ;; # DEFAULT
    esac
  done

# Get the first argument after the options
  shift $(( ${OPTIND} - 1))
  my_arg=${1}

# Reset the option variables since the shell doesn't do it
  OPTIND=${opt_id}
  OPTARG="${opt_arg}"

  chk_my_arg="$( echo "${my_arg##*/}" | sed -e 's/[[:space:]]//g' )"
  [ "X${my_arg}" = "X" ] && { retval=1; return ${retval}; }

  for iopt in ${my_opts}
  do
    [ ! ${iopt} "${my_arg}" ] && { retval=1; return ${retval}; }
  done

  return ${retval}
}

###========================================
### makeDIR()
### Usage:      makeDIR DirName
### Parameters: DirName (string), the directory to create
### Returns:    1 on failure (eg., argument list is empty)
###             0 on success
### Echoes:     NONE
###
### Creates the directory "DirName" if it doesn't exist,
### if the directory exists it checks if it is readable.
### On failure this function issues: exit 1
###========================================
makeDIR()
{
  local my_dir

  [ $# -eq 0 ] && return 0

  my_dir="$( strTrim "${1}" 2 )"
  [ -z "${my_dir:-}" ] && return 0

  if ! $( checkDIR "${my_dir}" ); then
    mkdir -p "${my_dir}" >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      procError "failed to create the directory: ${my_dir:-UNDEF}"
    else
      procWarn "created the empty directory: ${my_dir:-UNDEF}"
    fi
  fi

  if ! $( checkDIR -rwx "${my_dir}" ); then
    procError "directory exists but read/write/execute permissions are not valid" \
              "  Directory = ${my_dir:-UNDEF}"
  fi

  return 0
}

###========================================
### deleteDIR()
### Usage:      deleteDIR DirName
### Parameters: DirName (string), the directory to delete
### Returns:    1 on failure (eg., argument list is empty)
###             0 on success
### Echoes:     NONE
###
### Deletes the directory "DirName" if it exists,
### if the directory exists it checks if it is readable.
### On failure this function issues: exit 1
###========================================
deleteDIR()
{
  local nm_func="${FUNCNAME[0]}"

  local -i retval=0
  local my_dir
  local not_dirs=":/:${HOME}:${PATH}:.:"

  [ $# -eq 0 ] && { retval=1; return ${retval}; }

  my_dir="${1}"

  [[ :${not_dirs}: == *:${my_dir}:* ]] && { retval=1; return ${retval}; }
  
  [ $(id -u) -eq 0 ] && { retval=1; return ${retval}; }

  if $( checkDIR "${my_dir}" ); then
    rm -rf "${my_dir}" >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      procError "failed to delete the directory: ${my_dir:-UNDEF}"
    else
      procWarn "deleted the directory: ${my_dir:-UNDEF}"
    fi
  fi

  return ${retval}
}

###========================================
### checkPROG()
### Usage:      checkPROG [options] program
### Parameters: program (string)
### Returns:    1 if the options are not met or, no arguments
###             were supplied or, the program is an empty string
###             0 in any other case (success)
### Echoes:     NONE
###
### Possible options are:
### -h FILE exists and is a symbolic link (same as -L)
### -L FILE exists and is a symbolic link (same as -h)
### -r FILE exists and is readable
### -s FILE exists and has a size greater than zero
###
### Checks if the program "program" is a valid executable
### program based on the options supplied. If no options
### supplied it simply checks that if "program" is an
### executable program
###========================================
checkPROG()
{
  local get_opts my_arg="" chk_my_arg="" my_opts="-f -x" iopt
# Use these to reset the options since the shell does not
# do that automatically
  local opt_id=${OPTIND} opt_arg="${OPTARG}"

  [ $# -eq 0 ] && return 1

  while getopts ":hLrs" get_opts
  do
    case ${get_opts} in
      h|L) my_opts="${my_opts} -h";;
        r) my_opts="${my_opts} -r";;
        s) my_opts="${my_opts} -s";;
        *) ;; # DEFAULT
    esac
  done

# Get the first argument after the options
  shift $(( ${OPTIND} - 1))
  my_arg=${1}

# Reset the option variables since the shell doesn't do it
  OPTIND=${opt_id}
  OPTARG="${opt_arg}"

  chk_my_arg="$( echo "${my_arg##*/}" | sed -e 's/[[:space:]]//g' )"
  [ "X${chk_my_arg}" = "X" ] && return 1

  for iopt in ${my_opts}
  do
    [ ! ${iopt} ${my_arg} ] && return 1
  done

  return 0
}

###********************************************************************************
### END:: FILE FUNCTIONS
###********************************************************************************


###========================================
### getYesNo()
### Usage:      getYesNo value
### Parameters:
###   value : The input value (the value of a parameter)
###           The value of a bash parameter that is checked
###           against TRUE/FALSE. If the value is one of:
###             ">=1|y|yes|yea|yeah|yep"
###           then the value of parameter is TRUE (answer = yes).
###           If the value is one of:
###             "<=0|n|no|not|nop|nope"
###           then the value of parameter is FALSE (answer = no).
###           If the value is empty then the value of parameter
###           is FALSE (answer = no)
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : A "yes" or "no" answer.
###
### getYesNo: Checks if a parameter is assigned a TRUE/FALSE value.
###========================================
getYesNo()
{
  local param answer
  
  param="$( echo "${1}" | tr '[:upper:]' '[:lower:]' )"

  if [ "${param}" -eq "${param}" ] 2>/dev/null
  then
    [ ${param} -le 0 ] && param=0
    [ ${param} -gt 0 ] && param=1
  fi

  case "${param}" in
    1|y|yes|yea|yeah|yep) answer="yes" ;;
     0|n|no|not|nop|nope) answer="no"  ;;
                       *) answer=""    ;; # DEFAULT
  esac

  echo -n "${answer}"
}

###========================================
### checkFuncOpt()
### Usage:      checkFuncOpt opt_name
### Parameters:
###   opt_name: The name of the option to a function
###
### Returns : Exits on error
###
### Exports : __OPTION_LIST
###
### Echoes  : NONE
###
### checkFuncOpt: Checks if an option to a function is already supplied.
###========================================
checkFuncOpt() {
  local opt_inp opt_list

  [ $# -eq 0 ] && return -1

  opt_inp="$( strTrim "${1}" 2 )"
  opt_inp="$( echo "${opt_inp}" | sed 's/^[-]*//' )"

  opt_list="$( strTrim "${__OPTION_LIST}" 2 )"
  [ -n ${opt_list:+1} ] && \
    opt_list=":$( echo "${opt_list}" | sed 's/ /:/g' ):"

  [ "$( echo "${opt_list}" | egrep -o ":${opt_inp}:" )" ] && return 1

  __OPTION_LIST="${__OPTION_LIST} ${opt_inp}"
  export __OPTION_LIST

  return 0
}

###========================================
### getMakeVerbosity()
### Usage:      getMakeVerbosity verbosity_flag
### Parameters:
###   verbosity_flag : The verbosity flag
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The filtered verbosity flag
###
### getMakeVerbosity: Gets a valid GNU make verbosity flag
###========================================
getMakeVerbosity ()
{
  local opt_verb opt_verb i

  opt_inp="$( strTrim "${1}" 2 )"
  opt_inp="$( toLOWER "${opt_inp}" )"
  opt_inp="$( echo "${opt_inp}" | sed 's@[_/ .,:]@ @g' )"

  opt_verb=
  for i in ${opt_inp}
  do
    if `isInteger "${i}"` ; then
      [ ${i} -ge 1 ] && i=1
      [ ${i} -le 0 ] && i=0
    else
      [ "$( getYesNo "${i}" )" = "yes" ] && i=yes
      [ "$( getYesNo "${i}" )" = "no" ] && i=no
    fi

    case "${i}" in
      yes|1) opt_verb=b
         break
         ;;
      n|no|0) opt_verb=
         break
         ;;
      a) opt_verb=a
         break
         ;;
      b|v|i|j|m)
         if [ -z "${opt_verb}" ]; then
           opt_verb="${i}"
         else
           opt_verb="${opt_verb},${i}"
         fi
         ;;
      *) ;;
    esac
  done

  echo -n "${opt_verb}"
}

###========================================
### getCompilerNames()
###
### Usage:      getCompilerNames compile_family
###
### Parameters: compile_family = one of: gnu, intel, pgi
###
### Returns : error status
###
### Exports : CC CXX FC F90 PCC PCXX PFC PF90
###
### Echoes  : NONE
###
### getCompilerNames: Exports the compiler names for a compiler family.
###========================================
getCompilerNames()
{
  local cmp_family
  local err=0

  [ $# -eq 0 ] && return ${err}

  cmp_family="$( toLOWER "${1}" )"

  case "${cmp_family}" in
    gnu)
       CC=${CC:-gcc}
       CXX=${CXX:-g++}
       FC=${FC:-gfortran}
       F90=${F90:-${FC}}
       PCC=${PCC:-mpicc}
       PCXX=${PCXX:-mpicxx}
       PFC=${PFC:-mpif90}
       PF90=${PF90:-${PFC}}
       ;;
    intel)
       CC=${CC:-icc}
       CXX=${CXX:-icpc}
       FC=${FC:-ifort}
       F90=${F90:-${FC}}
       PCC=${PCC:-mpicc}
       PCXX=${PCXX:-mpicpc}
       PFC=${PFC:-mpifort}
       PF90=${PF90:-${PFC}}
       ;;
    pgi)
       CC=${CC:-pgcc}
       CXX=${CXX:-pgc++}
       FC=${FC:-pgfortran}
       F90=${F90:-${FC}}
       PCC=${PCC:-pgcc}
       PCXX=${PCXX:-pgc++}
       PFC==${PFC:-pgfortran}
       PF90=${PF90:-${PFC}}
       ;;
    *) # No defaults. Give the user the option to define the environment variables
       # CC, CXX, FC, F90 before running this script.
       #echo "WARNING: The supplied compiling system \"${COMPILER}\", is not suported."
       #echo "         Supported systems are anyone of: compiling_system=[${MY_COMPILING_SYTEMS}]"
       #echo "         Use: --compiler=compiling_system."
       #echo "         Will continue with OS defaults."
       getCompilerNames ${MY_COMPILER_DEFAULT}
       err=1
       ;;
  esac

  export CC CXX FC F90 PCC PCXX PFC PF90

  return ${err}
}

###========================================
### checkModuleCmd()
### Usage:      checkModuleCmd
###
### Returns : 1 on error
###
### Exports : modulecmd_ok (>= 1 module command exists)
###
### Echoes  : NONE
###
### checkModuleCmd: Checks if the command module is available.
###========================================
checkModuleCmd() {
  local err_val ret_val=0

  module -v >/dev/null 2>&1
  err_val=$?

  if [ ${err_val} -ne 0 ]; then
    [ -e /etc/profile.d/modules.sh ] && \
      . /etc/profile.d/modules.sh

    module -v >/dev/null 2>&1
    err_val=$?

    if [ ${err_val} -ne 0 ]; then
      ret_val=${err_val}
      modulecmd_ok=-1
    else
      ret_val=0
      modulecmd_ok=1
    fi
  else
    ret_val=0
    modulecmd_ok=1
  fi
  
  export modulecmd_ok
  
  return ${ret_val}
}

##################################################
### END:: UTILITY FUNCTIONS
##################################################
